import streamlit as st
import pandas as pd
import os
from datetime import datetime
import io
import logging
from reportlab.platypus import PageBreak

# Configura√ß√£o do logging
logging.basicConfig(
    filename='sistema_premios.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def carregar_tipos_afastamento():
    if os.path.exists("tipos_afastamento.pkl"):
        return pd.read_pickle("tipos_afastamento.pkl")
    return pd.DataFrame({"tipo": [], "categoria": []})

def salvar_tipos_afastamento(df):
    df.to_pickle("tipos_afastamento.pkl")

def processar_ausencias(df):
    # Renomear colunas com acentos
    df = df.rename(columns={
        "Matr√≠cula": "Matricula",
        "Centro de Custo": "Centro_de_Custo",
        "Aus√™ncia Integral": "Ausencia_Integral",
        "Aus√™ncia Parcial": "Ausencia_Parcial",
        "Data de Demiss√£o": "Data_de_Demissao"
    })
    
    # Converter Matricula para inteiro
    df['Matricula'] = pd.to_numeric(df['Matricula'], errors='coerce')
    df = df.dropna(subset=['Matricula'])
    df['Matricula'] = df['Matricula'].astype(int)
    
    # Processar faltas (X = 1, vazio = 0)
    df['Faltas'] = df['Falta'].fillna('')
    df['Faltas'] = df['Faltas'].apply(lambda x: 1 if str(x).upper().strip() == 'X' else 0)
    
    # Processar atrasos
    def converter_para_horas(tempo):
        if pd.isna(tempo) or tempo == '' or tempo == '00:00':
            return 0
        try:
            if ':' in str(tempo):
                horas, minutos = map(int, str(tempo).split(':'))
                return horas + minutos/60
            return 0
        except:
            return 0
    
    df['Horas_Atraso'] = df['Ausencia_Parcial'].apply(converter_para_horas)
    df['Afastamentos'] = df['Afastamentos'].fillna('').astype(str)
    
    # Agrupar por matr√≠cula
    resultado = df.groupby('Matricula').agg({
        'Faltas': 'sum',
        'Horas_Atraso': 'sum',
        'Afastamentos': lambda x: '; '.join(sorted(set(filter(None, x))))
    }).reset_index()
    
    # Formatar horas de atraso
    resultado['Atrasos'] = resultado['Horas_Atraso'].apply(
        lambda x: f"{int(x)}:{int((x % 1) * 60):02d}" if x > 0 else ""
    )
    resultado = resultado.drop('Horas_Atraso', axis=1)
    
    # Processar tipos de afastamento
    df_tipos = carregar_tipos_afastamento()
    for tipo in df_tipos['tipo'].unique():
        resultado[tipo] = resultado['Afastamentos'].str.contains(tipo, case=False).astype(int)
        resultado[tipo] = resultado[tipo].apply(lambda x: x if x > 0 else "")
    
    return resultado

def calcular_premio(df_funcionarios, df_ausencias, data_limite_admissao):
    # Lista de afastamentos que impedem o pr√™mio
    afastamentos_impeditivos = [
        "Declara√ß√£o Acompanhante", "Feriado", "Emenda Feriado", 
        "Licen√ßa Maternidade", "Declara√ß√£o INSS (dias)", 
        "Comparecimento Medico INSS", "Aposentado por Invalidez",
        "Atestado M√©dico", "Atestado de √ìbito", "Licen√ßa Paternidade",
        "Licen√ßa Casamento", "Acidente de Trabalho", "Auxilio Doen√ßa",
        "Primeira Suspens√£o", "Segunda Suspens√£o", "F√©rias",
        "Falta n√£o justificada", "Processo",
        "Falta n√£o justificada (dias)", "Atestado M√©dico (dias)"
    ]
    
    # Afastamentos que precisam de decis√£o
    afastamentos_decisao = ["Abono", "Atraso"]
    
    # Afastamentos permitidos
    afastamentos_permitidos = [
        "Folga Gestor", "Abonado Gerencia Loja",
        "Confraterniza√ß√£o universal", "Aniversario de S√£o Paulo"
    ]
    
    # Filtrar pela data de admiss√£o
    df_funcionarios['Data_Admissao'] = pd.to_datetime(df_funcionarios['Data_Admissao'], format='%d/%m/%Y')
    df_funcionarios = df_funcionarios[df_funcionarios['Data_Admissao'] <= pd.to_datetime(data_limite_admissao)]
    
    resultados = []
    for _, func in df_funcionarios.iterrows():
        ausencias = df_ausencias[df_ausencias['Matricula'] == func['Matricula']]
        
        tem_afastamento_impeditivo = False
        tem_afastamento_decisao = False
        tem_apenas_permitidos = False
        
        if not ausencias.empty:
            afastamentos = ' '.join(ausencias['Afastamentos'].fillna('').astype(str)).lower()
            
            # Verificar afastamentos impeditivos
            for afastamento in afastamentos_impeditivos:
                if afastamento.lower() in afastamentos:
                    tem_afastamento_impeditivo = True
                    break
            
            # Verificar afastamentos que precisam de decis√£o
            if not tem_afastamento_impeditivo:
                for afastamento in afastamentos_decisao:
                    if afastamento.lower() in afastamentos:
                        tem_afastamento_decisao = True
                        break
            
            # Verificar se tem apenas afastamentos permitidos
            tem_apenas_permitidos = not tem_afastamento_impeditivo and not tem_afastamento_decisao
        
        # Calcular valor do pr√™mio
        valor_premio = 0
        if func['Qtd_Horas_Mensais'] == 220:
            valor_premio = 300.00
        elif func['Qtd_Horas_Mensais'] <= 110:
            valor_premio = 150.00
        
        # Determinar status
        status = "N√£o tem direito"
        total_atrasos = ""
        
        if not tem_afastamento_impeditivo:
            if tem_afastamento_decisao:
                status = "Aguardando decis√£o"
                if not ausencias.empty and 'Atrasos' in ausencias.columns:
                    total_atrasos = ausencias['Atrasos'].iloc[0]
            elif tem_apenas_permitidos or ausencias.empty:
                status = "Tem direito"
        
        # Adicionar ao resultado
        resultados.append({
            'Matricula': func['Matricula'],
            'Nome': func['Nome_Funcionario'],
            'Cargo': func['Cargo'],
            'Local': func['Nome_Local'],
            'Horas_Mensais': func['Qtd_Horas_Mensais'],
            'Data_Admissao': func['Data_Admissao'],
            'Valor_Premio': valor_premio if status == "Tem direito" else 0,
            'Status': f"{status} (Total Atrasos: {total_atrasos})" if status == "Aguardando decis√£o" and total_atrasos else status,
            'Detalhes_Afastamentos': ausencias['Afastamentos'].iloc[0] if not ausencias.empty else ''
        })
    
    return pd.DataFrame(resultados)

def main():
    st.set_page_config(page_title="Sistema de Verifica√ß√£o de Pr√™mios", page_icon="üèÜ", layout="wide")
    st.title("Sistema de Verifica√ß√£o de Pr√™mios")
    
    with st.sidebar:
        st.header("Configura√ß√µes")
        
        data_limite = st.date_input(
            "Data Limite de Admiss√£o",
            help="Funcion√°rios admitidos ap√≥s esta data n√£o ter√£o direito ao pr√™mio",
            format="DD/MM/YYYY"
        )
        
        st.subheader("Base de Funcion√°rios")
        uploaded_func = st.file_uploader("Carregar base de funcion√°rios", type=['xlsx'])
        
        st.subheader("Base de Aus√™ncias")
        uploaded_ausencias = st.file_uploader("Carregar base de aus√™ncias", type=['xlsx'])
        
        st.subheader("Tipos de Afastamento")
        uploaded_tipos = st.file_uploader("Atualizar tipos de afastamento", type=['xlsx'])
        
        if uploaded_tipos is not None:
            try:
                df_tipos_novo = pd.read_excel(uploaded_tipos)
                if 'Nome' in df_tipos_novo.columns and 'Categoria' in df_tipos_novo.columns:
                    df_tipos = df_tipos_novo.rename(columns={'Nome': 'tipo', 'Categoria': 'categoria'})
                    salvar_tipos_afastamento(df_tipos)
                    st.success("Tipos de afastamento atualizados!")
                else:
                    st.error("Arquivo deve conter colunas 'Nome' e 'Categoria'")
            except Exception as e:
                st.error(f"Erro ao processar arquivo: {str(e)}")
    
    if uploaded_func is not None and uploaded_ausencias is not None and data_limite is not None:
        try:
            # Carregar base de funcion√°rios
            df_funcionarios = pd.read_excel(uploaded_func)
            df_funcionarios.columns = [
                "Matricula", "Nome_Funcionario", "Cargo", 
                "Codigo_Local", "Nome_Local", "Qtd_Horas_Mensais",
                "Tipo_Contrato", "Data_Termino_Contrato", 
                "Dias_Experiencia", "Salario_Mes_Atual", "Data_Admissao"
            ]
            
            # Carregar e processar base de aus√™ncias
            df_ausencias = pd.read_excel(uploaded_ausencias)
            df_ausencias = processar_ausencias(df_ausencias)
            
            # Calcular pr√™mios
            df_resultado = calcular_premio(df_funcionarios, df_ausencias, data_limite)
            
            st.subheader("Resultado do C√°lculo de Pr√™mios")
            
            # Filtros
            col1, col2 = st.columns(2)
            with col1:
                filtro_status = st.multiselect(
                    "Filtrar por Status",
                    options=sorted(df_resultado['Status'].unique())
                )
            
            with col2:
                filtro_local = st.multiselect(
                    "Filtrar por Local",
                    options=sorted(df_resultado['Local'].unique())
                )
            
            # Aplicar filtros
            df_mostrar = df_resultado
            if filtro_status:
                df_mostrar = df_mostrar[df_mostrar['Status'].isin(filtro_status)]
            if filtro_local:
                df_mostrar = df_mostrar[df_mostrar['Local'].isin(filtro_local)]
            
            # Relat√≥rio formatado na interface
            st.markdown("---")
            st.subheader("Relat√≥rio Executivo", divider="rainbow")
            
            # Criar conte√∫do HTML para o relat√≥rio
            html_content = f"""
            <div style="font-family: Arial; padding: 20px;">
                <h1 style="color: #1f77b4; text-align: center;">RELAT√ìRIO DE PR√äMIOS - VIS√ÉO EXECUTIVA</h1>
                <p style="text-align: right; font-size: 14px;">Data do relat√≥rio: {datetime.now().strftime('%d/%m/%Y')}</p>
                
                <div style="display: flex; justify-content: space-between; margin: 20px 0;">
                    <div style="text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                        <h3>Total Analisados</h3>
                        <h2>{len(df_mostrar):,}</h2>
                    </div>
                    <div style="text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                        <h3>Com Direito</h3>
                        <h2>{len(df_mostrar[df_mostrar['Status'] == 'Tem direito']):,}</h2>
                    </div>
                    <div style="text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                        <h3>Aguardando Decis√£o</h3>
                        <h2>{len(df_mostrar[df_mostrar['Status'].str.contains('Aguardando decis√£o', na=False)]):,}</h2>
                    </div>
                    <div style="text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                        <h3>Valor Total</h3>
                        <h2>R$ {df_mostrar['Valor_Premio'].sum():,.2f}</h2>
                    </div>
                </div>
            """
            
            # Adicionar detalhamento por status
            for status in sorted(df_mostrar['Status'].unique()):
                df_status = df_mostrar[df_mostrar['Status'] == status]
                html_content += f"""
                <div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
                    <h2 style="color: #1f77b4;">Status: {status}</h2>
                    <p><strong>Quantidade de Funcion√°rios:</strong> {len(df_status):,}</p>
                    <p><strong>Valor Total:</strong> R$ {df_status['Valor_Premio'].sum():,.2f}</p>
                    <p><strong>Locais Afetados:</strong></p>
                    <p>{', '.join(sorted(df_status['Local'].unique()))}</p>
                    
                    <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
                        <tr style="background-color: #1f77b4; color: white;">
                            <th style="padding: 8px; text-align: left;">Matr√≠cula</th>
                            <th style="padding: 8px; text-align: left;">Nome</th>
                            <th style="padding: 8px; text-align: left;">Cargo</th>
                            <th style="padding: 8px; text-align: left;">Local</th>
                            <th style="padding: 8px; text-align: right;">Valor Pr√™mio</th>
                        </tr>
                """
                
                for _, row in df_status.iterrows():
                    html_content += f"""
                        <tr style="border-bottom: 1px solid #ddd;">
                            <td style="padding: 8px;">{int(row['Matricula'])}</td>
                            <td style="padding: 8px;">{row['Nome']}</td>
                            <td style="padding: 8px;">{row['Cargo']}</td>
                            <td style="padding: 8px;">{row['Local']}</td>
                            <td style="padding: 8px; text-align: right;">R$ {row['Valor_Premio']:,.2f}</td>
                        </tr>
                    """
                
                html_content += """
                    </table>
                </div>
                """
            
            html_content += "</div>"
            
            # Mostrar relat√≥rio na interface
            st.write(html_content, unsafe_allow_html=True)
            
            # Exportar para PDF
            if st.button("üìë Exportar Relat√≥rio como PDF"):
                try:
                    from reportlab.lib import colors
                    from reportlab.lib.pagesizes import A4
                    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
                    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
                    from io import BytesIO
                    
                    # Criar PDF
                    buffer = BytesIO()
                    doc = SimpleDocTemplate(
                        buffer,
                        pagesize=A4,
                        rightMargin=30,
                        leftMargin=30,
                        topMargin=30,
                        bottomMargin=30
                    )
                    story = []
                    styles = getSampleStyleSheet()
                    
                    # Estilos personalizados
                    styles.add(ParagraphStyle(
                        'CustomTitle',
                        parent=styles['Heading1'],
                        fontSize=24,
                        spaceAfter=30,
                        alignment=1,
                        textColor=colors.HexColor('#1f77b4')
                    ))
                    
                    styles.add(ParagraphStyle(
                        'SectionHeader',
                        parent=styles['Heading2'],
                        fontSize=16,
                        spaceBefore=15,
                        spaceAfter=10,
                        textColor=colors.HexColor('#2c3e50')
                    ))
                    
                    # T√≠tulo e data
                    story.append(Paragraph("RELAT√ìRIO DE PR√äMIOS - VIS√ÉO EXECUTIVA", styles['CustomTitle']))
                    story.append(Paragraph(
                        f"Data do relat√≥rio: {datetime.now().strftime('%d/%m/%Y')}",
                        ParagraphStyle(
                            'Date',
                            parent=styles['Normal'],
                            alignment=2,
                            fontSize=12,
                            textColor=colors.grey
                        )
                    ))
                    story.append(Spacer(1, 20))
                    
                    # Resumo geral
                    resumo_data = [
                        ['RESUMO GERAL'],
                        [f'Total Analisados: {len(df_mostrar):,}'],
                        [f'Com Direito: {len(df_mostrar[df_mostrar["Status"] == "Tem direito"]):,}'],
                        [f'Aguardando Decis√£o: {len(df_mostrar[df_mostrar["Status"].str.contains("Aguardando decis√£o", na=False)]):,}'],
                        [f'Valor Total: R$ {df_mostrar["Valor_Premio"].sum():,.2f}']
                    ]
                    
                    t = Table(resumo_data, colWidths=[480])
                    t.setStyle(TableStyle([
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2c3e50')),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 14),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f8f9fa')),
                        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                        ('FONTSIZE', (0, 1), (-1, -1), 12),
                        ('GRID', (0, 0), (-1, -1), 1, colors.grey),
                        ('ROWHEIGHT', (0, 0), (-1, -1), 30),
                    ]))
                    story.append(t)
                    story.append(Spacer(1, 30))
                    
                    # Detalhamento por status
                    for status in sorted(df_mostrar['Status'].unique()):
                        df_status = df_mostrar[df_mostrar['Status'] == status]
                        
                        story.append(Paragraph(f'Status: {status}', styles['SectionHeader']))
                        
                        info_data = [
                            [f'Quantidade de Funcion√°rios: {len(df_status):,}'],
                            [f'Valor Total: R$ {df_status["Valor_Premio"].sum():,.2f}'],
                            ['Locais Afetados:'],
                            [', '.join(sorted(df_status['Local'].unique()))]
                        ]
                        
                        t = Table(info_data, colWidths=[480])
                        t.setStyle(TableStyle([
                            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f8f9fa')),
                            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                            ('FONTSIZE', (0, 0), (-1, -1), 10),
                            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                            ('GRID', (0, 0), (-1, -1), 1, colors.grey),
                            ('ROWHEIGHT', (0, 0), (-1, -1), 25),
                        ]))
                        story.append(t)
                        story.append(Spacer(1, 10))
                        
                        if len(df_status) > 0:
                            data = [['Matr√≠cula', 'Nome', 'Cargo', 'Local', 'Valor Pr√™mio']]
                            for _, row in df_status.iterrows():
                                data.append([
                                    str(int(row['Matricula'])),
                                    row['Nome'],
                                    row['Cargo'],
                                    row['Local'],
                                    f'R$ {row["Valor_Premio"]:,.2f}'
                                ])
                            
                            col_widths = [60, 140, 100, 120, 60]
                            t = Table(data, colWidths=col_widths)
                            t.setStyle(TableStyle([
                                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2c3e50')),
                                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                                ('FONTSIZE', (0, 0), (-1, 0), 10),
                                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                                ('FONTSIZE', (0, 1), (-1, -1), 8),
                                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                                ('ALIGN', (-1, 0), (-1, -1), 'RIGHT'),
                                ('GRID', (0, 0), (-1, -1), 1, colors.grey),
                                ('ROWHEIGHT', (0, 0), (-1, -1), 20),
                            ]))
                            story.append(t)
                        
                        story.append(PageBreak())
                    
                    doc.build(story)
                    
                    # Resumo Geral
                    data = [
                        ["RESUMO GERAL"],
                        [f"Total Analisados: {len(df_mostrar):,}"],
                        [f"Com Direito: {len(df_mostrar[df_mostrar['Status'] == 'Tem direito']):,}"],
                        [f"Aguardando Decis√£o: {len(df_mostrar[df_mostrar['Status'].str.contains('Aguardando decis√£o', na=False)]):,}"],
                        [f"Valor Total: R$ {df_mostrar['Valor_Premio'].sum():,.2f}"]
                    ]
                    
                    t = Table(data, colWidths=[450])
                    t.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 14),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                        ('FONTSIZE', (0, 1), (-1, -1), 12),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    story.append(t)
                    story.append(Spacer(1, 20))
                    
                    # Detalhamento por status
                    for status in sorted(df_mostrar['Status'].unique()):
                        df_status = df_mostrar[df_mostrar['Status'] == status]
                        
                        story.append(Paragraph(f"Status: {status}", styles['Heading2']))
                        story.append(Spacer(1, 10))
                        
                        data = [
                            [f"Quantidade de Funcion√°rios: {len(df_status):,}"],
                            [f"Valor Total: R$ {df_status['Valor_Premio'].sum():,.2f}"],
                            ["Locais Afetados:"],
                            [', '.join(sorted(df_status['Local'].unique()))]
                        ]
                        
                        t = Table(data, colWidths=[450])
                        t.setStyle(TableStyle([
                            ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                            ('FONTSIZE', (0, 0), (-1, -1), 10),
                            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                            ('GRID', (0, 0), (-1, -1), 1, colors.black)
                        ]))
                        story.append(t)
                        story.append(Spacer(1, 10))
                        
                        # Lista de funcion√°rios
                        if len(df_status) > 0:
                            data = [[
                                "Matr√≠cula", "Nome", "Cargo", "Local", "Valor Pr√™mio"
                            ]]
                            for _, row in df_status.iterrows():
                                data.append([
                                    str(int(row['Matricula'])),
                                    row['Nome'],
                                    row['Cargo'],
                                    row['Local'],
                                    f"R$ {row['Valor_Premio']:,.2f}"
                                ])
                            
                            t = Table(data, colWidths=[60, 120, 100, 100, 70])
                            t.setStyle(TableStyle([
                                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                                ('FONTSIZE', (0, 0), (-1, 0), 10),
                                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                                ('ALIGN', (-1, 0), (-1, -1), 'RIGHT'),
                                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                                ('FONTSIZE', (0, 1), (-1, -1), 8),
                                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                                ('ALIGN', (0, 0), (-1, -1), 'CENTER')
                            ]))
                            story.append(t)
                        
                        story.append(Spacer(1, 20))
                    
                    doc.build(story)
                    
                    # Bot√£o de download
                    st.download_button(
                        label="‚¨áÔ∏è Download PDF",
                        data=buffer.getvalue(),
                        file_name="relatorio_premios.pdf",
                        mime="application/pdf"
                    )
                    
                except Exception as e:
                    st.error(f"Erro ao gerar PDF: {str(e)}")

            
            # Estat√≠sticas
            st.subheader("Estat√≠sticas")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total de Funcion√°rios", len(df_mostrar))
            with col2:
                st.metric("Total com Direito", len(df_mostrar[df_mostrar['Status'] == "Tem direito"]))
            with col3:
                st.metric("Valor Total Pr√™mios", f"R$ {df_mostrar['Valor_Premio'].sum():.2f}")
            
            # Exportar resultados
            if st.button("Exportar Resultados"):
                output = io.BytesIO()
                
                # Preparar dados para exporta√ß√£o
                df_export = df_mostrar.copy()
                df_export['Salario'] = df_funcionarios.set_index('Matricula').loc[df_export['Matricula'], 'Salario_Mes_Atual'].values
                
                # Exportar planilha detalhada
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    df_export.to_excel(writer, index=False, sheet_name='Resultados Detalhados')
                    
                    # Criar relat√≥rio para diretoria
                    relatorio_diretoria = pd.DataFrame([
                        ["RELAT√ìRIO DE PR√äMIOS - VIS√ÉO EXECUTIVA", ""],
                        [f"Data do relat√≥rio: {datetime.now().strftime('%d/%m/%Y')}", ""],
                        ["", ""],
                        ["RESUMO GERAL", ""],
                        [f"Total de Funcion√°rios Analisados: {len(df_export)}", ""],
                        [f"Funcion√°rios com Direito: {len(df_export[df_export['Status'] == 'Tem direito'])}", ""],
                        [f"Funcion√°rios Aguardando Decis√£o: {len(df_export[df_export['Status'].str.contains('Aguardando decis√£o', na=False)])}", ""],
                        [f"Valor Total dos Pr√™mios: R$ {df_export['Valor_Premio'].sum():,.2f}", ""],
                        ["", ""],
                        ["DETALHAMENTO POR STATUS", ""],
                    ])
                    
                    # Adicionar detalhamento por status
                    for status in df_export['Status'].unique():
                        df_status = df_export[df_export['Status'] == status]
                        relatorio_diretoria = pd.concat([relatorio_diretoria, pd.DataFrame([
                            [f"\nStatus: {status}", ""],
                            [f"Quantidade de Funcion√°rios: {len(df_status)}", ""],
                            [f"Valor Total: R$ {df_status['Valor_Premio'].sum():,.2f}", ""],
                            ["Locais Afetados:", ""],
                            [", ".join(df_status['Local'].unique()), ""],
                            ["", ""]
                        ])])
                    
                    # Salvar relat√≥rio em nova aba
                    relatorio_diretoria.to_excel(writer, index=False, header=False, sheet_name='Relat√≥rio Executivo')
                
                st.download_button(
                    label="Download Excel",
                    data=output.getvalue(),
                    file_name="resultado_premios.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        except Exception as e:
            st.error(f"Erro ao processar dados: {str(e)}")

if __name__ == "__main__":
    main()
